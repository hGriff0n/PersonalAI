

Short Term:
  Integrate Seshat with device-manager
    Figure out how to create a daemon that periodically re-indexes the file-system
      Improve the tokio event spawning
        We need to be able to configure the indexer to parse stuff immediately or on the next tick
      Add in ability to specify device fs roots in config (cause there may be multiple)
        Might require allowing config files to be read by the device-manager
      Remove the index channels from the direct public interface (see 'seshat/index.rs/Index')
        Also remove the 'index' from the `DeviceManager` public interface (if possible)
        Add in more intuitive query methods to the indexing end
    Add hooks to device-manager to handle "search" actions
      See if I can make the 'action' handling somewhat generic
        This would mean removing the hardcoded "action" keys in `handle_requests`
        Probably replace with a map lookup into a lambda/function
      Be sure to handle cases where the Index map is out-of-date (due to fs changes)
    Add ability to dynamically load "plugins" for specific file types
      https://github.com/emoon/dynamic_reload
    Improve system performance and granularity
      Look at ripgrep (blog and codereview) for ideas
      Improve usage of rust features, streamline memory usage particularly
      Improve seshat memory usage and performance
        Look into filtering out common words (or integrating tf-idf)
  Add in "device-querying" capabilities to the cli interface (cli-specific interactions to produce statistics about the ai operations)
    Come up with a data-collection framework
    Possibly change the cli app to not work on sentences (except with special command)
    Enable querying of that data
  Make sure that everything works properly
    I think I need to rework the system a bit to spawn correctly
      Right now I think the device-manager requires a running ai-manager, but no ai-manager can be spawned
    Add in documentation for how to launch everything
    Add in functionality to query functionality
      ie. allow the cli app to query details about the status of the ai networking
      This would also entail setting up an app "privilege" system
  Look into exporting some of my rust work as "crates"

Produce a short video of the project

Medium Term:
  Distribute ai processing into separate nodes (basically split the device-manager into the ai-manager)
    Rewrite routing process inside of device-manager
      We need to be able to generically indicate which messages have to be forwarded to the ai-manager
      Optimize the new message and communication flows (to minimize number of messages)
      NOTE: Some messages we'll be able to handle locally (some we'll have to)
    Move plugins into the ai-manager orbit
      Create a process for indicating where plugins should be located (ie. tied to device or ai managers)
      Implement some degree of automatic python app registration
        Handshake procedure, etc.
    Make 'Seshat' distributed
      TODO: We'll probably want to create a full distributed file system for this
      TODO: We may want to separate the indexing in the ai-manager and device-manager
        Depending on how we handle networking the search engine, we may want the device-manager to map the paths to their "index results"
          The index results would be any "keys" extracted by the device handlers + the index data (ie. what we get from the search results + ranking data)
          This data would be periodically sent to the ai-manager, which would convert that data into the searchable results (ie. the maps we have already)
    Move the "search" and "dispatch" actions to forward to the ai-manager
    Implement "internal-only" communication actions
      eg. command to update global index (for when a file gets added on a local device)
      This would also add in a lot of "negotiation" messages for internal management
    Extract `loader.py` into common/scripts directory
    Enable sending files across devices
      NOTE: This is especially important for sending rust-plugins to new devices
    See if there's any way to "unify" ai-manager and device-manager
      ie. they should share as much code as possible, maybe not be under two separate folders
  It would be nice if the server could spawn up "One-time use" plugins as needed
  Improve the handshaking procedure to actually have some degree of security and utility
    Current system only works because I have everything hardcoded
  Improve launch script to incorporate some file watching
    Automatically run `setup.py install --user` if anything in the setup script/packages have changed
      Automatically run "build" if cargo modules change
  Improve the seshat engine with machine learning capabilities
    This is particularly relevant in filtering the results (such as with mis-spellings)
    Improve granularity of results
      ie. I should be able to search only music files, etc.
        This requires expanding what we store in the index (that or splitting into several indices)
      Look into making an sql-esque interface
  Reduce Technical Debt
    Update 'futures' to use the most recent version
    Ensure that all dependencies are at their most recent versions
    Improve the tracking of files to minimize need for reindexing
      Recognize which data did not come from under a specific root, so we don't have to throw it out if we're re-indexing that root

Long Term:
  Develop my own NLP system for decoding the purpose of messages (Wit doesn't seem to want to adapt)
  Redevelop networking code to better handle shutdowns, etc.
  Figure out how the device manager is supposed to act if I add in an AI node
    I suppose in the final system, the AI node gets setup first, so the server addr exists
    We can also use the udp broadcast system to handle this possibility
      Would need to modify the launcher script to wait until the manager has found the server
  Switch over networking to use udp broadcasting to determine where the servers are
    I'm hardcoding the locations for now as that is simpler for my initial development
// https://github.com/jholtmann/ip_discovery - can use this script during client startup
            // https://gist.github.com/rsolomo/8703190

Errors/Fixes:
  Fix the device-manager refusing to stop running
    It's some wierd nonsense with tokio
  Fix the issues with quit/stop behavior (Seem to have brought everything to a halt)
    Have wit recognize 'quit' and 'stop'
      Wit is absolutely unable to recognize 'quit' as anything other than a search query
    Might want to swap out for LUIS (or even roll my own solution)
