

Short Term:
  Implement file system searcher to handle music files
    Improve modularity of the system (turn it into a library)
    Add ability to dynamically load "plugins" for specific file types
    Improve system performance and granularity
      Split the indexer/crawler into separate (multithreaded?) stages
        The crawler puts data into a queue for the indexer to work off of
      Look at ripgrep (blog and codereview) for ideas
      Improve usage of rust features, streamline memory usage particularly
    Improve granularity of results
      I should be able to search only music files, etc.
      Look into making an sql-esque interface
  Move dispatch modality into ai-manager orbit
    Rewrite routing process inside of device-manager
      Think about how the new flow will act/look and optimize on that
    Implement handling inside of the ai-manager
      See what aspects I'd be able to extract into the server crate
    Extract loader.py into the common (or scripts) directory
  Integrate 'Seshat' into the ai-manager
    Make sure that ai communication works correctly
    Add hooks to the ai-manager to handle several "search" actions
      These actions would then query the search engine with specific actions
    Add hooks to dynamically load engine handlers and handle indexing
  Make sure that everything works properly
    I think I need to rework the system a bit to spawn correctly
      Right now I think the device-manager requires a running ai-manager, but no ai-manager can be spawned
    Add in documentation for how to launch everything
  Look into exporting some of my rust work as "crates"

Produce a short video of the project

Medium Term:
  Need to put a lot more effort into making stuff modular (and distributed)
    Probably need to add some form of distributed file system to go along with the search engine
      NOTE: The search engine also needs to add distributed support
    See if there is any way to unify the device and ai managers into one crate
  It would be nice if the server could spawn up "One-time use" plugins as needed
  Improve the handshaking procedure to actually have some degree of security and utility
    Current system only works because I have everything hardcoded
  Improve launch script to incorporate some file watching
    Automatically run `setup.py install --user` if anything in the setup script/packages have changed
      Automatically run "build" if cargo modules change

Long Term:
  Develop my own NLP system for decoding the purpose of messages (Wit doesn't seem to want to adapt)
  Figure out how the device manager is supposed to act if I add in an AI node
    I suppose in the final system, the AI node gets setup first, so the server addr exists
    We can also use the udp broadcast system to handle this possibility
      Would need to modify the launcher script to wait until the manager has found the server
  Switch over networking to use udp broadcasting to determine where the servers are
    I'm hardcoding the locations for now as that is simpler for my initial development
// https://github.com/jholtmann/ip_discovery - can use this script during client startup
            // https://gist.github.com/rsolomo/8703190

Errors/Fixes:
  Fix the device-manager refusing to stop running
    It's some wierd nonsense with tokio
  Fix the issues with quit/stop behavior (Seem to have brought everything to a halt)
    Have wit recognize 'quit' and 'stop'
      Wit is absolutely unable to recognize 'quit' as anything other than a search query
    Might want to swap out for LUIS (or even roll my own solution)
