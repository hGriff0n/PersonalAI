

Short Term:
  Add in "device-querying" capabilities to the cli interface
    Figure out how to add in automatic role specifying for the cli app
      Either implement the event system or enable "handle"-based routing
    Come up with a data-collection framework both in python and rust
      https://github.com/performancecopilot/hornet
    Instrument the device-manager to collect data about manager/plugin running
    Add manager endpoint handles to enable querying performance data
      One endpoint must enable getting list of connected apps
    Remove message queuing in the main thread of the cli app
      NOTE: We have to keep queuing for message received from outside
  Improve system performance and granularity
    Enable stopping the device-manager internally
      The `select2(cancel)` in 'main.rs' should work, but it doesn't seem to
    Remove the startup penalty when dealing with the indexer (threading daemon)
      Startup time when an index cache file delays plugin handshakes
        When a re-crawl is being performed, no connections will be handled
      Would need to add a way to indicate a "reindex" is currently being performed in the return results
      Add in an immediate crawl if the index file doesn't exist (currently do it if it's not in the config file)
      Add in a task to write the index file to the cache on drop/reindex
  Integrate an app "privilege" system to improve security
    Look into ways of "certifying" apps to prevent loading plugins "erroneously"

Produce a short video of the project
Plan out the next dev work cycle

Medium Term:
  TODO: AI capabilities
    We may be able to implement the ai-manager by just loading in an additional library to the device-manager
      NOTE: This library would register additional handles, etc.
  TODO: Audio Improvements
    Add "playlist" functionality to the playback system
      Play all the songs in the returned array
      Add new "play next" and "add to playback" options
    Remove the hardcoded path for the system sound files
      Or find a way to "install" the data directory
    Enable deregistering handles (in case plugin init/etc fails)
  TODO: Cli Improvements
    Decide on which approach to take for enabling apps to handle cli "command" messages
      Approach #1: Command parsing on the app-client
        NOTE: The cli client would be unchanged. However, we would indicate that the message is a "command" message which requires further parsing
          When a client receives this message it automatically sends the argument array through the specified argparse instance
          The results are then used to replace the 'args' key before being sent to the actual handle
        TODO:
          How to communicate errors
          What to do when a handle receives a "command" message but it does not have an argparser
      Approach #2: Command parsing on the cli-client
        NOTE: The client app would be mostly unchanged. However, the cli app would be changed to send it's data through registered argparsers before sending
          When a client is registered, it sends it's argparse instance as part of the handshake process. These argparsers are sent to any cli plugins which register
          Once a cli plugin resolves it's role:handle, the command args are run through the relevant argparser and the results put into the 'arg' key
        TODO:
          How to store the data on the manager side
          Handling handshake communications with new cli plugins and new apps
            NOTE: We'll have to do this communication anyways in order to register new apps/handles with the cli plugin
          How to communicate manager parsers (manager is in Rust, apps are language-agnostic)
      Approach #3: Do nothing, cli usage requires knowing the app in question
      TODO: (for #1 and #2)
        How to register and specify the argparsers on the client end
        How to adapt the current system to work when the new system is used
    Change the routing ack-mechanism to be "opt-in" on the sender side (as opposed to the responder side)
  TODO:Manager Improvements
    Augment routing system with the ability to recognize (and stop) loops
      Enable device-manager to handle a `quit-all` message
      Fix device-manager behavior with the Plugin handle error (which caused an infinite loop)
        NOTE: To trigger this, just replace the 'self.__class__.handle_ack' with 'self.handle_ack' in plugins.py
      NOTE: This may be better reserved for when we actually migrate to a fully distributed setup
        I think we'll have to rethink alot of the design/architecture of this system then anyways
    Figure out how to communicate a 'stop' "recognition" from the dispatch plugin
    Enable the manager to spawn up python plugins as needed
    Improve error and log messages
    Prevent duplicate handles being stored in registration
  TODO: New capabilities
    Add separate ai-manager node project
      Create ai-manager project to handle the administration of multiple devices
        TODO: See if there's a way to integrate this with the device-manager (ie. through promotion with additional capabilities)
      Rewrite device-manager routing and handles to account for this "parent" node
      NOTE: We should also rewrite the routing to assume a more distributed device system
      Come up with process for deciding where a plugin should reside
      Implement "internal-only" communication actions
    Add in a distributed file system implementation
      TODO: Research one of the topics from the "papers" group I was at earlier this year
      Rework seshat to operate on top of this distributed layer
        TODO: Decide if device-managers need to query the ai-manager to access this layer (I don't think so)
      Enable the ability to easily send documents between computers
      NOTE: This will probably need to have a working "AI-manager" node
      TODO: Figure out where 'search' should be handled in this system
  TODO: Documentation
    Produce documentation about what "actions" the std plugins/manager handle
      NOTE: Some actions are "notification endpoints", where no response is given
        Apps will never receive a notification from the server
        If a "notification" is needed, apps can query the system status
    Better document how plugin configuration files are processed
      Also see if there's a way to aggregate config files
    Better document the system architecture and design
  TODO: System design
    Figure out how plugins can extend the capabilities of the system when they are added
      Rewrite the launcher script to load the dispatch plugin first
      Rewrite the cli and audio plugins to utilize these addition capabilities
        See if I can get the launcher to wait for the dispatch handshake to finish before launch the cli/audio
    Rework routing to follow a "kubernetes"-style system
      Unify 'sender' and 'dest' into the same structure
      Organize plugins under a "label" system (instead of our current multi-tiered approach)
        Enable querying plugins under the join of these labels
    How should we handle new plugins which "extend" old plugins
      NOTE: Say we add in a new audio plugin on the laptop with an extra handle
        Dispatching to use this handle may end up sending the message to the original plugin, which doesn't have it
        Even though the command is valid, this will return an error message
    Introduce an "event framework" for system messages
      This would allow apps to subscribe to receive data when certain "system events" occur (eg. "App connected/disconnected")
        NOTE: This would be more of a generalization of the existing message system is some aspects
          The actual implementation should be similar to multicast subscriptions
    Improve handling of apps entering and leaving the system
    Add in ability to "gate" apps behind a second device-manager
      NOTE: This means that I should be able to forward messages on to a connection, even though the connection will just forward them to another connection
      I need to modify the routing system to work on "reachability" instead of "direct access"
        TODO: Research whether there's more effective methods for my use case
  TODO: System Build Improvements
    Disconnect the framework from the build directory structure
      I should be able to create a plugin anywhere and still spawn it in the system
    Move the `loader.py` script into some standard, non-configurable package location
    Move the plugin default arg dictionary into a yaml file, with the path specified in `conf.yaml`
      Then have the plugin.load function load from this yaml
    Rename the 'common' python package to something with fewer name clashes
    Look into auto-generating the python message class from the Rust structure
    Add ability to dynamically register/reload python "apps"
    Improve `launch.py` to have some basic filewatch capabilities
      Instead of using 'build' subcommand, automatically build if any rust files have changed
      Instead of using 'install' subcommand, automatically reinstall if any package files have changed
    Change 'plugin-dir' to take an array of values instead of one
  TODO: Seshat Improvements
    Improve results to be more accurate
      Integrate tf-idf ranking (or at least filter common words)
    Handle spelling errors in search results
    Integrate ML to improve results ranking
      NOTE: This may also be required for handling mis-spellings
    Improve granularity of search functionality
      ie. I should be able to search for only music files, etc.
    Add ability to load file-system "plugins" for specific file types (https://github.com/emoon/dynamic_reload)
    Figure out ways of tracking files to minimize need for reindexing
      Recognize which root the data came from (to not throw it out if we're re-indexing a different root)
  TODO: Optimization and Technical Debt
    Find a way to "pretty-print" time information in rust logs
    Figure out a way to detect registering `self.<handle>` instead of `<plugin>.<handle>`
    Streamline memory usage in device-manager
      NOTE: Look at ripgrep and clap for optimization ideas (https://gist.github.com/jFransham/369a86eff00e5f280ed25121454acec1)
    Upgrade rust to "rust 2018" (Improve usage of rust features)
    Change all errors to use a custom common type (ie. like `fern::InitError`)
    Better handle unrecognized options in rust
      Apparently clap doesn't natively support this
      https://github.com/clap-rs/clap/blob/eac457bdb095dade2efadd033af8d33e9c296f08/src/app/parser.rs
        The `get_matches_with` method immediately returns with an `Error::unknown_argument` when an unknown_argument is encountered
          I'd like it to instead just ignore these arguments and continue with parsing
          Apparently, there are cli utilities that allow for ignoring unknown arguments
    Update all dependencies to utilize the most recent version
    See if there isn't some way to configure the system to automatically log all panics before actually exiting

Long Term:
  Develop my own NLP system for decoding the purpose of messages (Wit doesn't seem to want to adapt)
  Redevelop networking code to better handle shutdowns, etc.
  Figure out how the device manager is supposed to act if I add in an AI node
    I suppose in the final system, the AI node gets setup first, so the server addr exists
    We can also use the udp broadcast system to handle this possibility
      Would need to modify the launcher script to wait until the manager has found the server
  Switch over networking to use udp broadcasting to determine where the servers are
    I'm hardcoding the locations for now as that is simpler for my initial development
// https://github.com/jholtmann/ip_discovery - can use this script during client startup
            // https://gist.github.com/rsolomo/8703190

Errors/Fixes:
  Fix the issues with quit/stop behavior (Seem to have brought everything to a halt)
    Have wit recognize 'quit' and 'stop'
      Wit is absolutely unable to recognize 'quit' as anything other than a search query
    Might want to swap out for LUIS (or even roll my own solution)
