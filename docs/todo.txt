

Short Term:
  Integrate Seshat with device-manager
    Rework the routing system according to 'routing.md'
      Replace the old loader
        Rewrite the plugins to work off of the new system
      Rewrite the rust forwarding system to utilize the new routing system
        NOTE: Use hardcoded json paths for now
          Any message crate would likely need to be auto-generated
      See if we can make the communication asyncio as well
    See if I can make the 'action' handling somewhat generic
      This would mean removing the hardcoded "action" keys in `handle_requests`
      Probably replace with a map lookup into a lambda/function
    Be sure to handle cases where the Index map is out-of-date (due to fs changes)
  Improve system performance and granularity
    Look at ripgrep (blog and codereview) for ideas
    Improve usage of rust features, streamline memory usage particularly
    Improve seshat memory usage and performance
      Look into filtering out common words (or integrating tf-idf)
      Have crawl use the logger instead of a file
        This requires changing 'tags' to use a logger instead of a file too
      Adapt the reindexer future to spawn a daemon thread instead of crawling in sequence
        The current code will stop all handling of requests while the crawler is running
    Look at allowing the device-manager to load a config file
      This would better allow us to configure the root folders (in case there are multiple)
        NOTE: We could possibly do this in the command line alone
  Add in "device-querying" capabilities to the cli interface
    NOTE: cli-specific interactions to produce statistics about the ai operations
    Come up with a data-collection framework
      https://github.com/performancecopilot/hornet
    Change the cli app to have a 'cmd' mode (operate like linux command line)
      May make this mode the default and have "dispatch" mode be a command/separate app
        Honestly "dispatch <string>" would work well
        May be beneficial to add in way of changing to automatic 'dispatch' mode
          NOTE: So we'd be able to type 'dispatch -i' and switch over to using dispatch only mode
          Or make a separate "chat" plugin/config
    Enable querying of that data
  Make sure that everything works properly
    Add in documentation for how to launch everything
      Improve the launcher code
    Improve network security with the loading of apps
      Setup an app "privilege" system
      Improve the handshake procedure to add a degree of confidence
  Look into publishing some of my rust work as "crates"
  Add ability to dynamically load "plugins" for specific file types
    https://github.com/emoon/dynamic_reload
    NOTE: If we do the dynamic reloading, we'd also need to allow for the python modules to be reloaded

Produce a short video of the project

Medium Term:
  Distribute ai processing into separate nodes (basically split the device-manager into the ai-manager)
    Rewrite routing process inside of device-manager
      We need to be able to generically indicate which messages have to be forwarded to the ai-manager
      Optimize the new message and communication flows (to minimize number of messages)
      NOTE: Some messages we'll be able to handle locally (some we'll have to)
    Move plugins into the ai-manager orbit
      Create a process for indicating where plugins should be located (ie. tied to device or ai managers)
      Implement some degree of automatic python app registration
        Handshake procedure, etc.
    Make 'Seshat' distributed
      TODO: We'll probably want to create a full distributed file system for this
      TODO: We may want to separate the indexing in the ai-manager and device-manager
        Depending on how we handle networking the search engine, we may want the device-manager to map the paths to their "index results"
          The index results would be any "keys" extracted by the device handlers + the index data (ie. what we get from the search results + ranking data)
          This data would be periodically sent to the ai-manager, which would convert that data into the searchable results (ie. the maps we have already)
    Move the "search" and "dispatch" actions to forward to the ai-manager
    Implement "internal-only" communication actions
      eg. command to update global index (for when a file gets added on a local device)
      This would also add in a lot of "negotiation" messages for internal management
    Extract `loader.py` into common/scripts directory
    Enable sending files across devices
      NOTE: This is especially important for sending rust-plugins to new devices
    See if there's any way to "unify" ai-manager and device-manager
      ie. they should share as much code as possible, maybe not be under two separate folders
  It would be nice if the server could spawn up "One-time use" plugins as needed
  Improve the handshaking procedure to actually have some degree of security and utility
    Current system only works because I have everything hardcoded
  Improve launch script to incorporate some file watching
    Automatically run `setup.py install --user` if anything in the setup script/packages have changed
      Automatically run "build" if cargo modules change
  Improve the configuration system
    Change 'plugin-dir' to take an array of values instead of a single path
  Improve the seshat engine with machine learning capabilities
    This is particularly relevant in filtering the results (such as with mis-spellings)
    Improve granularity of results
      ie. I should be able to search only music files, etc.
        This requires expanding what we store in the index (that or splitting into several indices)
      Look into making an sql-esque interface
  Reduce Technical Debt
    Update 'futures' to use the most recent version
    Ensure that all dependencies are at their most recent versions
    Improve the tracking of files to minimize need for reindexing
      Recognize which data did not come from under a specific root, so we don't have to throw it out if we're re-indexing that root

Long Term:
  Develop my own NLP system for decoding the purpose of messages (Wit doesn't seem to want to adapt)
  Redevelop networking code to better handle shutdowns, etc.
  Figure out how the device manager is supposed to act if I add in an AI node
    I suppose in the final system, the AI node gets setup first, so the server addr exists
    We can also use the udp broadcast system to handle this possibility
      Would need to modify the launcher script to wait until the manager has found the server
  Switch over networking to use udp broadcasting to determine where the servers are
    I'm hardcoding the locations for now as that is simpler for my initial development
// https://github.com/jholtmann/ip_discovery - can use this script during client startup
            // https://gist.github.com/rsolomo/8703190

Errors/Fixes:
  Fix the device-manager refusing to stop running
    It's some wierd nonsense with tokio
  Fix the issues with quit/stop behavior (Seem to have brought everything to a halt)
    Have wit recognize 'quit' and 'stop'
      Wit is absolutely unable to recognize 'quit' as anything other than a search query
    Might want to swap out for LUIS (or even roll my own solution)
